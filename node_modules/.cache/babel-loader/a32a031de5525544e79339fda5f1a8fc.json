{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ckher\\\\OneDrive\\\\Desktop\\\\React Projects\\\\Pomodoro_timer\\\\src\\\\pomodoro\\\\Pomodoro.js\";\nimport React, { useState } from \"react\";\nimport useInterval from \"../utils/useInterval\";\nimport Status from \"./Status\";\nimport Controls from \"./Controls\"; // These functions are defined outside of the component to ensure they do not have access to state\n// and are, therefore, more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\n\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return { ...prevState,\n    timeRemaining\n  };\n}\n/**\n * Higher-order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\n\n\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return currentSession => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        timeRemaining: breakDuration * 60\n      };\n    }\n\n    return {\n      label: \"Focusing\",\n      timeRemaining: focusDuration * 60\n    };\n  };\n}\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false); // The current session - null where there is no session running\n\n  const [session, setSession] = useState(null); // ToDo: Allow the user to adjust the focus and break duration.\n\n  const [focusDuration, setFocusDuration] = useState(25);\n  const [breakDuration, setBreakDuration] = useState(5);\n\n  function changeFocusTime({\n    target\n  }) {\n    console.log(target);\n    console.log(target.id);\n\n    if (target.id === 'increase-focus' || target.id === 'increase-focus-span') {\n      if (focusDuration < 60) {\n        setFocusDuration(focusDuration + 5);\n      }\n    }\n\n    if (target.id === 'decrease-focus' || target.id === 'decrease-focus-span') {\n      if (focusDuration > 5) {\n        setFocusDuration(focusDuration - 5);\n      }\n    }\n  }\n\n  function changeBreakTime({\n    target\n  }) {\n    if (target.id === 'increase-break' || target.id === 'increase-break-span') {\n      if (breakDuration < 15) {\n        setBreakDuration(breakDuration + 1);\n      }\n    }\n\n    if (target.id === 'decrease-break' || target.id === 'decrease-break-span') {\n      if (breakDuration > 1) {\n        setBreakDuration(breakDuration - 1);\n      }\n    }\n  }\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You won't need to make changes to the callback function\n   */\n\n\n  useInterval(() => {\n    if (session.timeRemaining === 0) {\n      new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n      return setSession(nextSession(focusDuration, breakDuration));\n    }\n\n    return setSession(nextTick);\n  }, isTimerRunning ? 1000 : null);\n  /**\n   * Called whenever the play/pause button is clicked.\n   */\n\n  function playPause() {\n    setIsTimerRunning(prevState => {\n      const nextState = !prevState;\n\n      if (nextState) {\n        setSession(prevStateSession => {\n          // If the timer is starting and the previous session is null,\n          // start a focusing session.\n          if (prevStateSession === null) {\n            return {\n              label: \"Focusing\",\n              timeRemaining: focusDuration * 60\n            };\n          }\n\n          return prevStateSession;\n        });\n      }\n\n      return nextState;\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pomodoro\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Controls, {\n    isTimerRunning: isTimerRunning,\n    setIsTimerRunning: setIsTimerRunning,\n    session: session,\n    setSession: setSession,\n    playPause: playPause,\n    focusDuration: focusDuration,\n    breakDuration: breakDuration,\n    changeBreakTime: changeBreakTime,\n    changeFocusTime: changeFocusTime,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Status, {\n    session: session,\n    focusDuration: focusDuration,\n    breakDuration: breakDuration,\n    isTimerRunning: isTimerRunning,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default Pomodoro;","map":{"version":3,"sources":["C:/Users/ckher/OneDrive/Desktop/React Projects/Pomodoro_timer/src/pomodoro/Pomodoro.js"],"names":["React","useState","useInterval","Status","Controls","nextTick","prevState","timeRemaining","Math","max","nextSession","focusDuration","breakDuration","currentSession","label","Pomodoro","isTimerRunning","setIsTimerRunning","session","setSession","setFocusDuration","setBreakDuration","changeFocusTime","target","console","log","id","changeBreakTime","Audio","play","playPause","nextState","prevStateSession"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport useInterval from \"../utils/useInterval\";\nimport Status from \"./Status\";\nimport Controls from \"./Controls\";\n\n// These functions are defined outside of the component to ensure they do not have access to state\n// and are, therefore, more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return {\n    ...prevState,\n    timeRemaining,\n  };\n}\n\n/**\n * Higher-order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return (currentSession) => {\n            \n    if (currentSession.label === \"Focusing\") {\n      \n      return {\n        label: \"On Break\",\n        timeRemaining: breakDuration * 60,\n        \n      };\n    }\n    return {\n      label: \"Focusing\",\n      timeRemaining: focusDuration * 60,\n    };\n  };\n}\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  // The current session - null where there is no session running\n  const [session, setSession] = useState(null);\n\n  // ToDo: Allow the user to adjust the focus and break duration.\n  \n  const [focusDuration,setFocusDuration] = useState(25);\n  const [breakDuration,setBreakDuration] = useState(5);\n\n  function changeFocusTime({target}) {\n    console.log(target)\n    console.log(target.id)\n    if (target.id === 'increase-focus' || target.id === 'increase-focus-span') {\n      if (focusDuration < 60) {\n        setFocusDuration(focusDuration + 5)\n      }\n    }\n    if (target.id === 'decrease-focus' || target.id === 'decrease-focus-span') {\n      if(focusDuration > 5) {\n        setFocusDuration(focusDuration - 5)\n      }\n    }\n  }\n  \n  function changeBreakTime({target}) {\n    if (target.id === 'increase-break' || target.id === 'increase-break-span') {\n      if (breakDuration < 15) {\n        setBreakDuration(breakDuration + 1)\n      }\n    }\n    if (target.id === 'decrease-break' || target.id === 'decrease-break-span') {\n      if (breakDuration > 1) {\n        setBreakDuration(breakDuration - 1)\n      }\n    }\n  }\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You won't need to make changes to the callback function\n   */\n  useInterval(() => {\n      if (session.timeRemaining === 0) {\n        new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n        return setSession(nextSession(focusDuration, breakDuration));\n      }\n      return setSession(nextTick);\n    },\n    isTimerRunning ? 1000 : null\n  );\n\n\n  /**\n   * Called whenever the play/pause button is clicked.\n   */\n  function playPause() {\n    \n    setIsTimerRunning((prevState) => {\n      const nextState = !prevState;\n      if (nextState) {\n        setSession((prevStateSession) => {\n          // If the timer is starting and the previous session is null,\n          // start a focusing session.\n          if (prevStateSession === null) {\n            return {\n              label: \"Focusing\",\n              timeRemaining: focusDuration * 60,\n            };\n            \n          }\n          return prevStateSession;\n        });\n        \n      }\n      \n      return nextState;\n    });\n  }\n\n  return (\n    <div className=\"pomodoro\">\n      <Controls isTimerRunning={isTimerRunning}\n      setIsTimerRunning={setIsTimerRunning}\n      session={session}\n      setSession={setSession}\n      playPause={playPause}\n      focusDuration={focusDuration}\n      breakDuration={breakDuration}\n      changeBreakTime={changeBreakTime}\n      changeFocusTime={changeFocusTime}\n      />\n      <Status session={session} focusDuration={focusDuration} breakDuration={breakDuration} isTimerRunning={isTimerRunning} />\n    </div>\n  );\n}\n\nexport default Pomodoro;\n"]},"metadata":{},"sourceType":"module"}